{"version":3,"sources":["shared/components/FormElements/Button.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/http-hook.js","shared/components/UIElements/Card.js","shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","places/pages/UpdatePlace.js"],"names":["Button","props","href","React","createElement","className","size","inverse","danger","children","to","Link","exact","type","onClick","disabled","ErrorModal","Modal","onCancel","onClear","header","show","showError","footer","ModalOverlay","content","style","headerClass","onSubmit","event","preventDefault","contentClass","footerClass","ReactDOM","createPortal","document","getElementById","Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","useHttpClient","isLoading","setIsLoading","useState","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","async","url","method","arguments","length","undefined","body","headers","console","log","substring","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","Card","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","test","inputReducer","state","action","isTouched","Input","inputState","dispatch","useReducer","initialValue","initialValid","id","onInput","changeHandler","target","touchHandler","element","placeholder","onChange","onBlur","rows","htmlFor","label","errorText","formReducer","inputs","formIsValid","inputId","useForm","initialInputs","initialFormValidity","formState","setFormData","inputData","formValidity","UpdatePlace","auth","useContext","AuthContext","loadedPlace","setLoadedPlace","placeId","useParams","history","useHistory","inputHandler","title","description","place","err","fetchPlace","LoadingSpinner","JSON","stringify","Authorization","token","userId"],"mappings":"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","file":"static/js/5.85d9c2d4.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n  if (props.href) {\r\n    return (\r\n      <a\r\n        className={`button button--${props.size || 'default'} ${props.inverse &&\r\n          'button--inverse'} ${props.danger && 'button--danger'}`}\r\n        href={props.href}\r\n      >\r\n        {props.children}\r\n      </a>\r\n    );\r\n  }\r\n\r\n  if (props.to) {\r\n    return (\r\n      <Link\r\n        to={props.to}\r\n        exact={props.exact}\r\n        className={`button button--${props.size || 'default'} ${props.inverse &&\r\n          'button--inverse'} ${props.danger && 'button--danger'}`}\r\n      >\r\n        {props.children}\r\n      </Link>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <button\r\n      className={`button button--${props.size || 'default'} ${props.inverse &&\r\n        'button--inverse'} ${props.danger && 'button--danger'}`}\r\n      type={props.type}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nimport Modal from './Modal';\r\nimport Button from '../FormElements/Button';\r\n\r\nconst ErrorModal = props => {\r\n  return (\r\n    <Modal\r\n      onCancel={props.onClear}\r\n      header=\"An Error Occurred!\"\r\n      show={!!props.showError}\r\n      footer={<Button onClick={props.onClear}>Okay</Button>}\r\n    >\r\n      <p>{props.showError}</p>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport Backdrop from './Backdrop'\r\nimport './Modal.css'\r\n\r\nconst ModalOverlay = props => {\r\n  const content = (\r\n    <div className={`modal ${props.className}`} style={props.style}>\r\n      <header className={`modal__header ${props.headerClass}`}>\r\n        <h2>{props.header}</h2>\r\n      </header>\r\n      <form\r\n        onSubmit={\r\n          props.onSubmit ? props.onSubmit : (event) => { event.preventDefault() }\r\n        }\r\n      >\r\n        <div className={`modal__content ${props.contentClass}`}>\r\n          {props.children}\r\n        </div>\r\n        <footer className={`modal__footer ${props.footerClass}`}>\r\n          {props.footer}\r\n        </footer>\r\n      </form>\r\n    </div>\r\n  );\r\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = props => {\r\n  return (\r\n    <React.Fragment>\r\n      {props.show ? <Backdrop onClick={props.onCancel} /> : null}\r\n      {/* {props.show && <Backdrop onClick={props.onCancel} />} <-- 어두운 배경 클릭시 Cancel 핸들러 동작*/}\r\n\r\n      <CSSTransition\r\n        in={props.show} // CSSTransition 의 in props 가 true 면 mount 하고 false면 unmount 함\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={200}\r\n        classNames=\"modal\"\r\n      >\r\n        <ModalOverlay {...props} />\r\n      </CSSTransition>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n/*\r\n{drawerIsOpen ? <Backdrop onClick={closeDrawer} /> : null}\r\n둘의 형상은 동일함 // if drawerIsOpen is True : <Backdrop onClick={closeDrawer} /> 이므로\r\n{drawerIsOpen && <Backdrop onClick={closeDrawer} />}\r\n*/\r\nexport default Modal;","import { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  const activeHttpRequests = useRef([]);\r\n  // [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\r\n  // useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\r\n  // activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = {}) => {\r\n      // body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\r\n      console.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0, 22)} \\n${url.substring(22, )}`);\r\n\r\n      // if (body !== null) {\r\n      //   headers = { \"Content-Type\": \"application/json\" };\r\n      // }\r\n      \r\n      setIsLoading(true);\r\n      const httpAbortCtrl = new AbortController();\r\n      activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal,\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        activeHttpRequests.current = activeHttpRequests.current.filter(\r\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\r\n        );\r\n\r\n        if (response.ok) {\r\n          // responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\r\n          return responseData;\r\n        } else {\r\n          throw new Error(responseData.message);\r\n        }\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setIsLoading(false);\r\n        throw error;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort()); // abort 메서드를 호출하여 HTTP 요청을 취소\r\n      /**\r\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\r\n            const abortCtrl = activeHttpRequests.current[i];\r\n            abortCtrl.abort();\r\n          }\r\n       */\r\n    };\r\n  }, []);\r\n  return { isLoading, error, sendRequest, clearError };\r\n};\r\n\r\n// // axios 서드파티Lib 쓰는 경우\r\n// if (isLoginMode) {\r\n//     // 로그인 모드일 때의 로직\r\n// } else {\r\n//     // 회원가입 모드일 때의 로직\r\n//     try {\r\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\r\n//             name: formState.inputs.name.value,\r\n//             email: formState.inputs.email.value,\r\n//             password: formState.inputs.password.value\r\n//         }, {\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             }\r\n//         });\r\n\r\n//         const responseData = response.data;\r\n//         console.log(responseData);\r\n//         auth.login();\r\n//     } catch (err) {\r\n//         console.log(err);\r\n//     }\r\n// }\r\n","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import React, { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators)\r\n      };\r\n    case 'TOUCH': {\r\n      return {\r\n        ...state,\r\n        isTouched: true\r\n      }\r\n    }\r\n    default:\r\n\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = props => {\r\n  // const [enteredValue, setEnteredValue] = useState('');\r\n  // const [isValue, sesValid] = useState(false); <-- 이렇게 해도 되지만\r\n  // 상태가 더 복잡하거나 상호 연관된 상태 일 때 useReducer 을 쓰면 코드가 더 간단해진다.\r\n\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || '',  // props.value 이 Empty면 ''\r\n    isTouched: false,\r\n    isValid: props.initialValid || false // props.value 이 Empty면 false\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n  useEffect(() => {\r\n    onInput(id, value, isValid)\r\n  }, [id, value, isValid, onInput])\r\n\r\n  const changeHandler = event => {\r\n    dispatch({\r\n      type: 'CHANGE',\r\n      val: event.target.value,\r\n      validators: props.validators\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH'\r\n    });\r\n  }\r\n\r\n  const element =\r\n    props.element === 'input' ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n  \r\n  return (\r\n    <div className={`form-control ${!inputState.isValid &&\r\n      inputState.isTouched &&\r\n      'form-control--invalid'}`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {\r\n        !inputState.isValid &&\r\n        inputState.isTouched &&\r\n        <p>{props.errorText}</p>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Input;\r\n\r\n\r\n// // useReducer 간단 예시\r\n// /** useReducer( dispatch때 호출할 함수, 호출할 함수의 첫번째 인자(accumulateState)의 초기 값 )\r\n//  * \r\n//  * 1. dispatch 로 reducer 함수를 호출 하고 \r\n//  * 2. dispatch 에 들어가는 인자값은 reducer 의 action 에 으로 전달된다.\r\n//  * 3. reducer 의 첫번째 인자인 accumulateState 에는 초기값이 들어 있고, 함수가 호출됨에 따라 값이 누적된다.\r\n//  * 4. reducer 함수가 return 하는 값들은 useReducer 함수에서 return 됬던 stateResult에 업데이트된다.\r\n//  * 5. useReducer 에서 return 됬던 stateResult 값이 이전 값과 다르면 리렌더링 한다.\r\n//  */\r\n\r\n// import React, { useReducer } from 'react';\r\n\r\n// const initialState = { count: 0 };\r\n\r\n// function reducer(accumulateState, action) {\r\n//   switch (action.type) {\r\n//     case 'increment':\r\n//       return { count: accumulateState.count + 1 };\r\n//     case 'decrement':\r\n//       return { count: accumulateState.count - 1 };\r\n//     default:\r\n//       throw new Error();\r\n//   }\r\n// }\r\n\r\n// const Counter = () => {\r\n//   const [stateResult, dispatch] = useReducer(reducer, initialState);\r\n\r\n//   return (\r\n//     <div>\r\n//       <p>Count: {stateResult.count}</p>\r\n//       <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\r\n//       <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Counter;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // useEffect 간단 예시\r\n// // /** useEffect( 의존성변수가 바뀔 떄마다 호출할 함수, 의존성 변수 )\r\n// //  *  동작 : 버튼을 누를 떄마다 \"로딩 중...\" 을 띄우고 count를 up 시키면서 'https://jsonplaceholder.typicode.com/posts/1' 링크 data를 읽어온다.\r\n// //  * \r\n// //  * 1. useEffect함수의 의존성변수로 count 를 지정\r\n// //  * 2. \"로딩 중...\" 출력\r\n// //  * 3. 버튼 클릭스 count 하나씩 Up 시킴\r\n// //  * 4. count 가 의존 변수이므로 useEffect에 등록한 함수 호출\r\n// //  * 5. 'https://jsonplaceholder.typicode.com/posts/1' 읽어서 화면에 출력 + Up된 count 출력\r\n// //  */\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const DataFetcher = () => {\r\n//   const [data, setData] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [count, setCount] = useState(0); // 버튼 클릭 시 변경되는 상태 변수\r\n\r\n//   useEffect(() => {\r\n//     // JSONPlaceholder API에서 데이터를 가져옵니다.\r\n//     setLoading(true); // 새로운 요청을 시작할 때 로딩 상태로 설정\r\n//     fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         setData(data);\r\n//         setLoading(false);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);\r\n//         setLoading(false);\r\n//       });\r\n//   }, [count]); // count가 변경될 때마다 실행\r\n\r\n//   if (loading) {\r\n//     return <p>로딩 중...</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>데이터 가져오기 예제</h1>\r\n//       {data ? <pre>{JSON.stringify(data, 2)}</pre> : <p>데이터가 없습니다.</p>}\r\n//       <button onClick={() => setCount(count + 1)}>데이터 다시 가져오기</button>\r\n//       <p1> Count : {count}</p1>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DataFetcher;\r\n","import { useCallback, useReducer } from \"react\";\r\n/**\r\n * 커스텀 훅\r\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\r\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\r\n */\r\n\r\nconst formReducer = (state, action) => {\r\n  // console.log(state)\r\n  switch (action.type) {\r\n    case 'SET_DATA':\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid\r\n      };\r\n    case 'INPUT_CHANGE':\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\r\n        }\r\n        if (inputId === action.inputId) {\r\n          // dispatch 한 ID 를 업데이트 한다\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          // dispatch 한 ID 를 업데이트 하지 않고\r\n          // 기존의 있는 id 를 가져온다\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: {\r\n            value: action.value,\r\n            isValid: action.isValid\r\n          }\r\n        },\r\n        isValid: formIsValid\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity\r\n  });\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: 'SET_DATA',\r\n      inputs: inputData,\r\n      formIsValid: formValidity\r\n    })\r\n  }, []);\r\n\r\n  const InputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: 'INPUT_CHANGE',\r\n      inputId: id,\r\n      value: value,\r\n      isValid: isValid,\r\n    })\r\n  }, []);\r\n\r\n  /*\r\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\r\n   * const exam = (a) => { return 1; }\r\n   * const exam = useCallback((a) => { return 1; })\r\n  */\r\n  // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\r\n  // 이를 방지 하기 위해 쓰는게 userCallback\r\n  // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\r\n  // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\r\n  //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\r\n\r\n  return [formState, InputHandler, setFormData];\r\n};","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\n\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nimport \"./PlaceForm.css\";\r\n\r\nconst UpdatePlace = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const placeId = useParams().placeId;\r\n  const history = useHistory();\r\n\r\n  // 서버의 경우 Data 지연이 일어나는 상황을 재현 해보려고 주석 처리함.\r\n  // const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\r\n\r\n  const [formState, inputHandler, setFormData] = useForm({\r\n    title: {\r\n      value: \"\",\r\n      isValid: false\r\n    },\r\n    description: {\r\n      value: \"\",\r\n      isValid: false\r\n    }\r\n  }, false);\r\n\r\n  // const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BASE}${process.env.REACT_APP_PLACES_ROUTE}/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true\r\n            }\r\n          },\r\n          true\r\n        );\r\n\r\n      } catch (err) { }\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BASE}${process.env.REACT_APP_PLACES_ROUTE}/${placeId}`,\r\n        'PATCH',\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${auth.token}`\r\n        }\r\n      );\r\n      history.push('/' + auth.userId + '/places');\r\n    } catch (err) { }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal showError={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title.\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (min. 5 characters).\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;"],"sourceRoot":""}