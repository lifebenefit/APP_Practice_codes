{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IMWONHYEOK\\\\study\\\\react\\\\section_11\\\\frontend\\\\src\\\\user\\\\pages\\\\Auth.js\";\nimport React, { useState, useContext } from \"react\";\n\n// eslint-disable-next-line\nimport axios from 'axios';\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { API_BASE, API_USERS } from \"../../config\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport './Auth.css';\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,\n        // 기존의 값은 유지하며 \n        name: undefined,\n        // name 필드만 undefined 함\n        image: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({\n        ...formState.inputs,\n        // 기존의 값은 유지하며 \n        name: {\n          // 다른 필드의 값만 Add 함.\n          value: '',\n          isValid: false\n        },\n        image: {\n          value: null,\n          isValid: false\n        }\n      }, false);\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n  const authSubmitHandler = async event => {\n    event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n    // console.log(formState.inputs);\n\n    // fetch 함수를 쓰는 경우\n    if (isLoginMode) {\n      // 로그인 모드일 때의 로직\n      try {\n        const responseData = await sendRequest(`${API_BASE.home}${API_BASE.usersRoutes}${API_USERS.login}`, 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }));\n        console.log(responseData);\n        // auth.userId = responseData.user.id;\n        auth.login(responseData.user.id); // useState를 쓰기위함\n      } catch (err) {}\n    } else {\n      // 회원가입 모드일 때의 로직\n      try {\n        const formData = new FormData();\n        const responseData = await sendRequest(`${API_BASE.home}${API_BASE.usersRoutes}${API_USERS.signup}`, 'POST', JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }));\n        console.log(responseData);\n        // auth.userId = responseData.user.id;\n        auth.login(responseData.user.id); // useState를 쓰기위함\n      } catch (err) {}\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    showError: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Login Required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a name.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), !isLoginMode && /*#__PURE__*/React.createElement(ImageUpload, {\n    center: true,\n    id: \"image\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid Email address.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(6)],\n    errorText: \"Please enter a valid password, at least 6 characters.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, isLoginMode ? \"확인\" : \"회원정보 작성 완료\")), /*#__PURE__*/React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, isLoginMode ? '회원 가입' : '로그인', \"\\uC73C\\uB85C \\uAC00\\uAE30\")));\n};\nexport default Auth;","map":{"version":3,"names":["React","useState","useContext","axios","Card","Input","Button","ErrorModal","LoadingSpinner","ImageUpload","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","API_BASE","API_USERS","AuthContext","useForm","useHttpClient","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","image","prevMode","authSubmitHandler","event","preventDefault","responseData","home","usersRoutes","login","JSON","stringify","console","log","user","id","err","formData","FormData","signup","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","showError","onClear","className","asOverlay","onSubmit","element","type","label","validators","errorText","onInput","center","disabled","inverse","onClick"],"sources":["C:/Users/IMWONHYEOK/study/react/section_11/frontend/src/user/pages/Auth.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\n\n// eslint-disable-next-line\nimport axios from 'axios';\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE\n} from \"../../shared/util/validators\";\nimport { API_BASE, API_USERS } from \"../../config\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,     // 기존의 값은 유지하며 \n        name: undefined,         // name 필드만 undefined 함\n        image: undefined,\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid\n    );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,    // 기존의 값은 유지하며 \n          name: {                 // 다른 필드의 값만 Add 함.\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n    // console.log(formState.inputs);\n\n    // fetch 함수를 쓰는 경우\n    if (isLoginMode) {\n      // 로그인 모드일 때의 로직\n      try {\n        const responseData = await sendRequest(\n          `${API_BASE.home}${API_BASE.usersRoutes}${API_USERS.login}`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        );\n        console.log(responseData);\n        // auth.userId = responseData.user.id;\n        auth.login(responseData.user.id); // useState를 쓰기위함\n\n      } catch (err) { }\n    } else {\n      // 회원가입 모드일 때의 로직\n      try {\n        const formData = new FormData();\n        const responseData = await sendRequest(\n          `${API_BASE.home}${API_BASE.usersRoutes}${API_USERS.signup}`,\n          'POST',\n          JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        );\n        console.log(responseData);\n        // auth.userId = responseData.user.id;\n        auth.login(responseData.user.id); // useState를 쓰기위함\n\n      } catch (err) { }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal showError={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload center id=\"image\" onInput={inputHandler} />\n          )}\n          <Input element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid Email address.\"\n            onInput={inputHandler}\n          />\n          <Input element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"확인\" : \"회원정보 작성 완료\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>{isLoginMode ? '회원 가입' : '로그인'}으로 가기</Button>\n      </Card>\n    </React.Fragment>);\n};\n\nexport default Auth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}