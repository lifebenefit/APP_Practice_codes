{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from \"react\";\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  // [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\n  // useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\n  // activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\n\n  const sendRequest = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    // body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\n    console.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0, 22)} \\n${url.substring(22)}`);\n\n    // if (body !== null) {\n    //   headers = { \"Content-Type\": \"application/json\" };\n    // }\n\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n      if (response.ok) {\n        // responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\n        return responseData;\n      } else {\n        throw new Error(responseData.message);\n      }\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const clearError = () => {\n    setError(null);\n  };\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort()); // abort 메서드를 호출하여 HTTP 요청을 취소\n      /**\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\n            const abortCtrl = activeHttpRequests.current[i];\n            abortCtrl.abort();\n          }\n       */\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};\n\n// // axios 서드파티Lib 쓰는 경우\n// if (isLoginMode) {\n//     // 로그인 모드일 때의 로직\n// } else {\n//     // 회원가입 모드일 때의 로직\n//     try {\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\n//             name: formState.inputs.name.value,\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value\n//         }, {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         });\n\n//         const responseData = response.data;\n//         console.log(responseData);\n//         auth.login();\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","console","log","substring","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","clearError","forEach","abortCtrl","abort"],"sources":["C:/Users/IMWONHYEOK/study/react/section_13/frontend/src/shared/hooks/http-hook.js"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n  // [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\n  // useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\n  // activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      // body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\n      console.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0, 22)} \\n${url.substring(22, )}`);\n\n      // if (body !== null) {\n      //   headers = { \"Content-Type\": \"application/json\" };\n      // }\n      \n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal,\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\n        );\n\n        if (response.ok) {\n          // responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\n          return responseData;\n        } else {\n          throw new Error(responseData.message);\n        }\n      } catch (error) {\n        setError(error.message);\n        setIsLoading(false);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort()); // abort 메서드를 호출하여 HTTP 요청을 취소\n      /**\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\n            const abortCtrl = activeHttpRequests.current[i];\n            abortCtrl.abort();\n          }\n       */\n    };\n  }, []);\n  return { isLoading, error, sendRequest, clearError };\n};\n\n// // axios 서드파티Lib 쓰는 경우\n// if (isLoginMode) {\n//     // 로그인 모드일 때의 로직\n// } else {\n//     // 회원가입 모드일 때의 로직\n//     try {\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\n//             name: formState.inputs.name.value,\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value\n//         }, {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         });\n\n//         const responseData = response.data;\n//         console.log(responseData);\n//         auth.login();\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAEhE,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAEpC,MAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAE,CAAC;EACrC;EACA;EACA;;EAEA,MAAMQ,WAAW,GAAGT,WAAW,CAC7B,OAAOU,GAAG,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IACxD;IACAC,OAAO,CAACC,GAAG,CAAC,mBAAmBJ,MAAM,OAAOD,GAAG,CAACM,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,MAAMN,GAAG,CAACM,SAAS,CAAC,EAAI,CAAC,EAAE,CAAC;;IAE5F;IACA;IACA;;IAEAX,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMY,aAAa,GAAG,IAAIC,eAAe,CAAC,CAAC;IAC3CV,kBAAkB,CAACW,OAAO,CAACC,IAAI,CAACH,aAAa,CAAC;IAE9C,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACZ,GAAG,EAAE;QAChCC,MAAM;QACNC,IAAI;QACJC,OAAO;QACPU,MAAM,EAAEN,aAAa,CAACM;MACxB,CAAC,CAAC;MAEF,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAE1CjB,kBAAkB,CAACW,OAAO,GAAGX,kBAAkB,CAACW,OAAO,CAACO,MAAM,CAC3DC,OAAO,IAAKA,OAAO,KAAKV,aAC3B,CAAC;MAED,IAAII,QAAQ,CAACO,EAAE,EAAE;QACf;QACA,OAAOJ,YAAY;MACrB,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAACL,YAAY,CAACM,OAAO,CAAC;MACvC;IACF,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACwB,OAAO,CAAC;MACvBzB,YAAY,CAAC,KAAK,CAAC;MACnB,MAAMC,KAAK;IACb,CAAC,SAAS;MACRD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EACD,EACF,CAAC;EAED,MAAM0B,UAAU,GAAGA,CAAA,KAAM;IACvBxB,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAEDL,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXM,kBAAkB,CAACW,OAAO,CAACa,OAAO,CAAEC,SAAS,IAAKA,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MACtE;AACN;AACA;AACA;AACA;AACA;IACI,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IAAE9B,SAAS;IAAEE,KAAK;IAAEG,WAAW;IAAEsB;EAAW,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}