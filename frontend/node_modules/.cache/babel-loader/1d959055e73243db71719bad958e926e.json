{"ast":null,"code":"import { useCallback, useReducer } from \"react\";\n/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */\n\n// action ===\n//             {\n//                 inputs: {\n//                     title: {\n//                         value: \"\",\n//                         isValid: false\n//                     },\n//                     description: {\n//                         value: \"\",\n//                         isValid: false\n//                     }\n//                 },\n//                 isValid: false\n//             }\nconst formReducer = (state, action) => {\n  // console.log(state)\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n        }\n        if (inputId === action.inputId) {\n          // dispatch 한 ID 를 업데이트 한다\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // dispatch 한 ID 를 업데이트 하지 않고\n          // 기존의 있는 id 를 가져온다\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\nexport const useForm = (initialInputs, initialFormValidity) => {\n  // const [formState, dispatch] = useReducer(formReducer, {\n  //     inputs: {\n  //         title: {\n  //             value: \"\",\n  //             isValid: false\n  //         },\n  //         description: {\n  //             value: \"\",\n  //             isValid: false\n  //         }\n  //     },\n  //     isValid: false\n  // });\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  /*\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\n   * const exam = (a) => { return 1; }\n   * const exam = useCallback((a) => { return 1; })\n  */\n  // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n  // 이를 방지 하기 위해 쓰는게 userCallback\n  // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n  // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n  //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  return [formState, InputHandler, setFormData];\n};","map":{"version":3,"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","InputHandler","id","setFormData","inputData","formValidity"],"sources":["C:/Users/IMWONHYEOK/study/react/section_10/frontend/src/shared/hooks/form-hook.js"],"sourcesContent":["import { useCallback, useReducer } from \"react\";\n/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */\n\n// action ===\n//             {\n//                 inputs: {\n//                     title: {\n//                         value: \"\",\n//                         isValid: false\n//                     },\n//                     description: {\n//                         value: \"\",\n//                         isValid: false\n//                     }\n//                 },\n//                 isValid: false\n//             }\nconst formReducer = (state, action) => {\n    // console.log(state)\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]){\n                    continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n                }\n                if (inputId === action.inputId) {\n                    // dispatch 한 ID 를 업데이트 한다\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    // dispatch 한 ID 를 업데이트 하지 않고\n                    // 기존의 있는 id 를 가져온다\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {\n                        value: action.value,\n                        isValid: action.isValid\n                    }\n                },\n                isValid: formIsValid\n            };\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    // const [formState, dispatch] = useReducer(formReducer, {\n    //     inputs: {\n    //         title: {\n    //             value: \"\",\n    //             isValid: false\n    //         },\n    //         description: {\n    //             value: \"\",\n    //             isValid: false\n    //         }\n    //     },\n    //     isValid: false\n    // });\n\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const InputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value,\n            isValid: isValid,\n            inputId: id\n        })\n    }, []);\n    /*\n     * 밑에 두 함수는 기본적으로 기능이 동일하다.\n     * const exam = (a) => { return 1; }\n     * const exam = useCallback((a) => { return 1; })\n    */\n    // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n    // 이를 방지 하기 위해 쓰는게 userCallback\n    // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n    // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n    //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        })\n    }, []);\n\n    return [formState, InputHandler, setFormData];\n};"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC;EACA,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,cAAc;MACf,IAAIC,WAAW,GAAG,IAAI;MACtB,KAAK,MAAMC,OAAO,IAAIJ,KAAK,CAACK,MAAM,EAAE;QAChC,IAAI,CAACL,KAAK,CAACK,MAAM,CAACD,OAAO,CAAC,EAAC;UACvB,SAAS,CAAC;QACd;QACA,IAAIA,OAAO,KAAKH,MAAM,CAACG,OAAO,EAAE;UAC5B;UACAD,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAAO;QAC/C,CAAC,MAAM;UACH;UACA;UACAH,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAM,CAACD,OAAO,CAAC,CAACE,OAAO;QAC9D;MACJ;MACA,OAAO;QACH,GAAGN,KAAK;QACRK,MAAM,EAAE;UACJ,GAAGL,KAAK,CAACK,MAAM;UACf,CAACJ,MAAM,CAACG,OAAO,GAAG;YACdG,KAAK,EAAEN,MAAM,CAACM,KAAK;YACnBD,OAAO,EAAEL,MAAM,CAACK;UACpB;QACJ,CAAC;QACDA,OAAO,EAAEH;MACb,CAAC;IACL,KAAK,UAAU;MACX,OAAO;QACHE,MAAM,EAAEJ,MAAM,CAACI,MAAM;QACrBC,OAAO,EAAEL,MAAM,CAACE;MACpB,CAAC;IACL;MACI,OAAOH,KAAK;EACpB;AACJ,CAAC;AAED,OAAO,MAAMQ,OAAO,GAAGA,CAACC,aAAa,EAAEC,mBAAmB,KAAK;EAC3D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAGd,UAAU,CAACC,WAAW,EAAE;IAClDM,MAAM,EAAEI,aAAa;IACrBH,OAAO,EAAEI;EACb,CAAC,CAAC;EAEF,MAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAE,EAAEP,KAAK,EAAED,OAAO,KAAK;IACrDM,QAAQ,CAAC;MACLV,IAAI,EAAE,cAAc;MACpBK,KAAK,EAAEA,KAAK;MACZD,OAAO,EAAEA,OAAO;MAChBF,OAAO,EAAEU;IACb,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;EACA;EACA;;EAEA,MAAMC,WAAW,GAAGlB,WAAW,CAAC,CAACmB,SAAS,EAAEC,YAAY,KAAK;IACzDL,QAAQ,CAAC;MACLV,IAAI,EAAE,UAAU;MAChBG,MAAM,EAAEW,SAAS;MACjBb,WAAW,EAAEc;IACjB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACN,SAAS,EAAEE,YAAY,EAAEE,WAAW,CAAC;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}