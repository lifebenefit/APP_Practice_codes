{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IMWONHYEOK\\\\study\\\\react\\\\section_10\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useReducer, useEffect } from \"react\";\nimport { validate } from \"../../util/validators\";\nimport './Input.css';\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH':\n      {\n        return {\n          ...state,\n          isTouched: true\n        };\n      }\n    default:\n      return state;\n  }\n};\nconst Input = props => {\n  // const [enteredValue, setEnteredValue] = useState('');\n  // const [isValue, sesValid] = useState(false); <-- 이렇게 해도 되지만\n  // 상태가 더 복잡하거나 상호 연관된 상태 일 때 useReducer 을 쓰면 코드가 더 간단해진다.\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    // props.value 이 Empty면 ''\n    isTouched: false,\n    isValid: props.initialValid || false // props.value 이 Empty면 false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, props.errorText));\n};\nexport default Input;\n\n// // useReducer 간단 예시\n// /** useReducer( dispatch때 호출할 함수, 호출할 함수의 첫번째 인자(accumulateState)의 초기 값 )\n//  * \n//  * 1. dispatch 로 reducer 함수를 호출 하고 \n//  * 2. dispatch 에 들어가는 인자값은 reducer 의 action 에 으로 전달된다.\n//  * 3. reducer 의 첫번째 인자인 accumulateState 에는 초기값이 들어 있고, 함수가 호출됨에 따라 값이 누적된다.\n//  * 4. reducer 함수가 return 하는 값들은 useReducer 함수에서 return 됬던 stateResult에 업데이트된다.\n//  * 5. useReducer 에서 return 됬던 stateResult 값이 이전 값과 다르면 리렌더링 한다.\n//  */\n\n// import React, { useReducer } from 'react';\n\n// const initialState = { count: 0 };\n\n// function reducer(accumulateState, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return { count: accumulateState.count + 1 };\n//     case 'decrement':\n//       return { count: accumulateState.count - 1 };\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// const Counter = () => {\n//   const [stateResult, dispatch] = useReducer(reducer, initialState);\n\n//   return (\n//     <div>\n//       <p>Count: {stateResult.count}</p>\n//       <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n//       <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n//     </div>\n//   );\n// };\n\n// export default Counter;\n\n// // useEffect 간단 예시\n// // /** useEffect( 의존성변수가 바뀔 떄마다 호출할 함수, 의존성 변수 )\n// //  *  동작 : 버튼을 누를 떄마다 \"로딩 중...\" 을 띄우고 count를 up 시키면서 'https://jsonplaceholder.typicode.com/posts/1' 링크 data를 읽어온다.\n// //  * \n// //  * 1. useEffect함수의 의존성변수로 count 를 지정\n// //  * 2. \"로딩 중...\" 출력\n// //  * 3. 버튼 클릭스 count 하나씩 Up 시킴\n// //  * 4. count 가 의존 변수이므로 useEffect에 등록한 함수 호출\n// //  * 5. 'https://jsonplaceholder.typicode.com/posts/1' 읽어서 화면에 출력 + Up된 count 출력\n// //  */\n\n// import React, { useState, useEffect } from 'react';\n\n// const DataFetcher = () => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [count, setCount] = useState(0); // 버튼 클릭 시 변경되는 상태 변수\n\n//   useEffect(() => {\n//     // JSONPlaceholder API에서 데이터를 가져옵니다.\n//     setLoading(true); // 새로운 요청을 시작할 때 로딩 상태로 설정\n//     fetch('https://jsonplaceholder.typicode.com/posts/1')\n//       .then(response => response.json())\n//       .then(data => {\n//         setData(data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);\n//         setLoading(false);\n//       });\n//   }, [count]); // count가 변경될 때마다 실행\n\n//   if (loading) {\n//     return <p>로딩 중...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>데이터 가져오기 예제</h1>\n//       {data ? <pre>{JSON.stringify(data, 2)}</pre> : <p>데이터가 없습니다.</p>}\n//       <button onClick={() => setCount(count + 1)}>데이터 다시 가져오기</button>\n//       <p1> Count : {count}</p1>\n//     </div>\n//   );\n// };\n\n// export default DataFetcher;","map":{"version":3,"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","createElement","placeholder","onChange","onBlur","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","rows","className","htmlFor","label","errorText"],"sources":["C:/Users/IMWONHYEOK/study/react/section_10/frontend/src/shared/components/FormElements/Input.js"],"sourcesContent":["import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n\n      return state;\n  }\n};\n\nconst Input = props => {\n  // const [enteredValue, setEnteredValue] = useState('');\n  // const [isValue, sesValid] = useState(false); <-- 이렇게 해도 되지만\n  // 상태가 더 복잡하거나 상호 연관된 상태 일 때 useReducer 을 쓰면 코드가 더 간단해진다.\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',  // props.value 이 Empty면 ''\n    isTouched: false,\n    isValid: props.initialValid || false // props.value 이 Empty면 false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput])\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  }\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n  \n  return (\n    <div className={`form-control ${!inputState.isValid &&\n      inputState.isTouched &&\n      'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {\n        !inputState.isValid &&\n        inputState.isTouched &&\n        <p>{props.errorText}</p>\n      }\n    </div >\n  );\n}\n\nexport default Input;\n\n\n// // useReducer 간단 예시\n// /** useReducer( dispatch때 호출할 함수, 호출할 함수의 첫번째 인자(accumulateState)의 초기 값 )\n//  * \n//  * 1. dispatch 로 reducer 함수를 호출 하고 \n//  * 2. dispatch 에 들어가는 인자값은 reducer 의 action 에 으로 전달된다.\n//  * 3. reducer 의 첫번째 인자인 accumulateState 에는 초기값이 들어 있고, 함수가 호출됨에 따라 값이 누적된다.\n//  * 4. reducer 함수가 return 하는 값들은 useReducer 함수에서 return 됬던 stateResult에 업데이트된다.\n//  * 5. useReducer 에서 return 됬던 stateResult 값이 이전 값과 다르면 리렌더링 한다.\n//  */\n\n// import React, { useReducer } from 'react';\n\n// const initialState = { count: 0 };\n\n// function reducer(accumulateState, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return { count: accumulateState.count + 1 };\n//     case 'decrement':\n//       return { count: accumulateState.count - 1 };\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// const Counter = () => {\n//   const [stateResult, dispatch] = useReducer(reducer, initialState);\n\n//   return (\n//     <div>\n//       <p>Count: {stateResult.count}</p>\n//       <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n//       <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n//     </div>\n//   );\n// };\n\n// export default Counter;\n\n\n\n\n\n\n\n// // useEffect 간단 예시\n// // /** useEffect( 의존성변수가 바뀔 떄마다 호출할 함수, 의존성 변수 )\n// //  *  동작 : 버튼을 누를 떄마다 \"로딩 중...\" 을 띄우고 count를 up 시키면서 'https://jsonplaceholder.typicode.com/posts/1' 링크 data를 읽어온다.\n// //  * \n// //  * 1. useEffect함수의 의존성변수로 count 를 지정\n// //  * 2. \"로딩 중...\" 출력\n// //  * 3. 버튼 클릭스 count 하나씩 Up 시킴\n// //  * 4. count 가 의존 변수이므로 useEffect에 등록한 함수 호출\n// //  * 5. 'https://jsonplaceholder.typicode.com/posts/1' 읽어서 화면에 출력 + Up된 count 출력\n// //  */\n\n// import React, { useState, useEffect } from 'react';\n\n// const DataFetcher = () => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [count, setCount] = useState(0); // 버튼 클릭 시 변경되는 상태 변수\n\n//   useEffect(() => {\n//     // JSONPlaceholder API에서 데이터를 가져옵니다.\n//     setLoading(true); // 새로운 요청을 시작할 때 로딩 상태로 설정\n//     fetch('https://jsonplaceholder.typicode.com/posts/1')\n//       .then(response => response.json())\n//       .then(data => {\n//         setData(data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);\n//         setLoading(false);\n//       });\n//   }, [count]); // count가 변경될 때마다 실행\n\n//   if (loading) {\n//     return <p>로딩 중...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>데이터 가져오기 예제</h1>\n//       {data ? <pre>{JSON.stringify(data, 2)}</pre> : <p>데이터가 없습니다.</p>}\n//       <button onClick={() => setCount(count + 1)}>데이터 다시 가져오기</button>\n//       <p1> Count : {count}</p1>\n//     </div>\n//   );\n// };\n\n// export default DataFetcher;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAEpD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,OAAO,aAAa;AAEpB,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,QAAQ;MACX,OAAO;QACL,GAAGF,KAAK;QACRG,KAAK,EAAEF,MAAM,CAACG,GAAG;QACjBC,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAG,EAAEH,MAAM,CAACK,UAAU;MACjD,CAAC;IACH,KAAK,OAAO;MAAE;QACZ,OAAO;UACL,GAAGN,KAAK;UACRO,SAAS,EAAE;QACb,CAAC;MACH;IACA;MAEE,OAAOP,KAAK;EAChB;AACF,CAAC;AAED,MAAMQ,KAAK,GAAGC,KAAK,IAAI;EACrB;EACA;EACA;;EAEA,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGf,UAAU,CAACG,YAAY,EAAE;IACtDI,KAAK,EAAEM,KAAK,CAACG,YAAY,IAAI,EAAE;IAAG;IAClCL,SAAS,EAAE,KAAK;IAChBF,OAAO,EAAEI,KAAK,CAACI,YAAY,IAAI,KAAK,CAAC;EACvC,CAAC,CAAC;EAEF,MAAM;IAAEC,EAAE;IAAEC;EAAQ,CAAC,GAAGN,KAAK;EAC7B,MAAM;IAAEN,KAAK;IAAEE;EAAQ,CAAC,GAAGK,UAAU;EACrCb,SAAS,CAAC,MAAM;IACdkB,OAAO,CAACD,EAAE,EAAEX,KAAK,EAAEE,OAAO,CAAC;EAC7B,CAAC,EAAE,CAACS,EAAE,EAAEX,KAAK,EAAEE,OAAO,EAAEU,OAAO,CAAC,CAAC;EAEjC,MAAMC,aAAa,GAAGC,KAAK,IAAI;IAC7BN,QAAQ,CAAC;MACPT,IAAI,EAAE,QAAQ;MACdE,GAAG,EAAEa,KAAK,CAACC,MAAM,CAACf,KAAK;MACvBG,UAAU,EAAEG,KAAK,CAACH;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMa,YAAY,GAAGA,CAAA,KAAM;IACzBR,QAAQ,CAAC;MACPT,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMkB,OAAO,GACXX,KAAK,CAACW,OAAO,KAAK,OAAO,gBACvBzB,KAAA,CAAA0B,aAAA;IACEP,EAAE,EAAEL,KAAK,CAACK,EAAG;IACbZ,IAAI,EAAEO,KAAK,CAACP,IAAK;IACjBoB,WAAW,EAAEb,KAAK,CAACa,WAAY;IAC/BC,QAAQ,EAAEP,aAAc;IACxBQ,MAAM,EAAEL,YAAa;IACrBhB,KAAK,EAAEO,UAAU,CAACP,KAAM;IAAAsB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACzB,CAAC,gBAEFnC,KAAA,CAAA0B,aAAA;IACEP,EAAE,EAAEL,KAAK,CAACK,EAAG;IACbiB,IAAI,EAAEtB,KAAK,CAACsB,IAAI,IAAI,CAAE;IACtBR,QAAQ,EAAEP,aAAc;IACxBQ,MAAM,EAAEL,YAAa;IACrBhB,KAAK,EAAEO,UAAU,CAACP,KAAM;IAAAsB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACzB,CACF;EAEH,oBACEnC,KAAA,CAAA0B,aAAA;IAAKW,SAAS,EAAE,gBAAgB,CAACtB,UAAU,CAACL,OAAO,IACjDK,UAAU,CAACH,SAAS,IACpB,uBAAuB,EAAG;IAAAkB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE1BnC,KAAA,CAAA0B,aAAA;IAAOY,OAAO,EAAExB,KAAK,CAACK,EAAG;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAErB,KAAK,CAACyB,KAAa,CAAC,EAC9Cd,OAAO,EAEN,CAACV,UAAU,CAACL,OAAO,IACnBK,UAAU,CAACH,SAAS,iBACpBZ,KAAA,CAAA0B,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAIrB,KAAK,CAAC0B,SAAa,CAErB,CAAC;AAEX,CAAC;AAED,eAAe3B,KAAK;;AAGpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}