{"ast":null,"code":"import { useCallback, useReducer } from \"react\";\n/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */\n\nconst formReducer = (state, action) => {\n  // console.log(state)\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n        }\n        if (inputId === action.inputId) {\n          // dispatch 한 ID 를 업데이트 한다\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // dispatch 한 ID 를 업데이트 하지 않고\n          // 기존의 있는 id 를 가져온다\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n    default:\n      return state;\n  }\n};\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value: value,\n      isValid: isValid\n    });\n  }, []);\n\n  /*\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\n   * const exam = (a) => { return 1; }\n   * const exam = useCallback((a) => { return 1; })\n  */\n  // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n  // 이를 방지 하기 위해 쓰는게 userCallback\n  // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n  // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n  //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\n\n  return [formState, InputHandler, setFormData];\n};","map":{"version":3,"names":["useCallback","useReducer","formReducer","state","action","type","inputs","isValid","formIsValid","inputId","value","useForm","initialInputs","initialFormValidity","formState","dispatch","setFormData","inputData","formValidity","InputHandler","id"],"sources":["C:/Users/IMWONHYEOK/study/react/section_11/frontend/src/shared/hooks/form-hook.js"],"sourcesContent":["import { useCallback, useReducer } from \"react\";\n/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */\n\nconst formReducer = (state, action) => {\n  // console.log(state)\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n        }\n        if (inputId === action.inputId) {\n          // dispatch 한 ID 를 업데이트 한다\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // dispatch 한 ID 를 업데이트 하지 않고\n          // 기존의 있는 id 를 가져온다\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    })\n  }, []);\n\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    })\n  }, []);\n\n  /*\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\n   * const exam = (a) => { return 1; }\n   * const exam = useCallback((a) => { return 1; })\n  */\n  // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n  // 이를 방지 하기 위해 쓰는게 userCallback\n  // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n  // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n  //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\n\n  return [formState, InputHandler, setFormData];\n};"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAC/C;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,UAAU;MACb,OAAO;QACLC,MAAM,EAAEF,MAAM,CAACE,MAAM;QACrBC,OAAO,EAAEH,MAAM,CAACI;MAClB,CAAC;IACH,KAAK,cAAc;MACjB,IAAIA,WAAW,GAAG,IAAI;MACtB,KAAK,MAAMC,OAAO,IAAIN,KAAK,CAACG,MAAM,EAAE;QAClC,IAAI,CAACH,KAAK,CAACG,MAAM,CAACG,OAAO,CAAC,EAAE;UAC1B,SAAS,CAAC;QACZ;QACA,IAAIA,OAAO,KAAKL,MAAM,CAACK,OAAO,EAAE;UAC9B;UACAD,WAAW,GAAGA,WAAW,IAAIJ,MAAM,CAACG,OAAO;QAC7C,CAAC,MAAM;UACL;UACA;UACAC,WAAW,GAAGA,WAAW,IAAIL,KAAK,CAACG,MAAM,CAACG,OAAO,CAAC,CAACF,OAAO;QAC5D;MACF;MACA,OAAO;QACL,GAAGJ,KAAK;QACRG,MAAM,EAAE;UACN,GAAGH,KAAK,CAACG,MAAM;UACf,CAACF,MAAM,CAACK,OAAO,GAAG;YAChBC,KAAK,EAAEN,MAAM,CAACM,KAAK;YACnBH,OAAO,EAAEH,MAAM,CAACG;UAClB;QACF,CAAC;QACDA,OAAO,EAAEC;MACX,CAAC;IACH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMQ,OAAO,GAAGA,CAACC,aAAa,EAAEC,mBAAmB,KAAK;EAE7D,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAGd,UAAU,CAACC,WAAW,EAAE;IACpDI,MAAM,EAAEM,aAAa;IACrBL,OAAO,EAAEM;EACX,CAAC,CAAC;EAEF,MAAMG,WAAW,GAAGhB,WAAW,CAAC,CAACiB,SAAS,EAAEC,YAAY,KAAK;IAC3DH,QAAQ,CAAC;MACPV,IAAI,EAAE,UAAU;MAChBC,MAAM,EAAEW,SAAS;MACjBT,WAAW,EAAEU;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAGnB,WAAW,CAAC,CAACoB,EAAE,EAAEV,KAAK,EAAEH,OAAO,KAAK;IACvDQ,QAAQ,CAAC;MACPV,IAAI,EAAE,cAAc;MACpBI,OAAO,EAAEW,EAAE;MACXV,KAAK,EAAEA,KAAK;MACZH,OAAO,EAAEA;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;AACA;EACE;EACA;EACA;EACA;EACA;;EAEA,OAAO,CAACO,SAAS,EAAEK,YAAY,EAAEH,WAAW,CAAC;AAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}