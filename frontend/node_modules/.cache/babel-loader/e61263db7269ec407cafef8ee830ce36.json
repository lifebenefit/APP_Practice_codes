{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IMWONHYEOK\\\\study\\\\react\\\\section_10\\\\frontend\\\\src\\\\user\\\\pages\\\\Auth.js\";\nimport React, { useState, useContext } from \"react\";\n// eslint-disable-next-line\nimport axios from 'axios';\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport './Auth.css';\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const [formState, InputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,\n        // 기존의 값은 유지하며 \n        name: undefined // name 필드만 undefined함\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({\n        ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n  const authSubmitHander = async event => {\n    event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n\n    // fetch 함수를 쓰는 경우\n    if (isLoginMode) {\n      // 로그인 모드일 때의 로직\n    } else {\n      // 회원가입 모드일 때의 로직\n      try {\n        setIsLoading(true);\n        const response = fetch('http://localhost:5000/api/users/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        const responseData = (await response).json();\n        console.log(responseData);\n        setIsLoading(false);\n        auth.login();\n        auth.login();\n      } catch (err) {\n        console.log(err);\n        setIsLoading(false);\n        setError(err.message || 'Something went wrong, please try again');\n      }\n    }\n\n    // // axios 서드파티Lib 쓰는 경우\n    // if (isLoginMode) {\n    //     // 로그인 모드일 때의 로직\n    // } else {\n    //     // 회원가입 모드일 때의 로직\n    //     try {\n    //         const response = await axios.post('http://localhost:5000/api/users/signup', {\n    //             name: formState.inputs.name.value,\n    //             email: formState.inputs.email.value,\n    //             password: formState.inputs.password.value\n    //         }, {\n    //             headers: {\n    //                 'Content-Type': 'application/json'\n    //             }\n    //         });\n\n    //         const responseData = response.data;\n    //         console.log(responseData);\n    //         auth.login();\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n  };\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOveray: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Login Required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmitHander,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a name.\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid Email address.\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid password, at least 5 characters.\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, isLoginMode ? \"확인\" : \"회원정보 작성 완료\")), /*#__PURE__*/React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, isLoginMode ? '회원 가입' : '로그인', \"\\uC73C\\uB85C \\uAC00\\uAE30\"));\n};\nexport default Auth;","map":{"version":3,"names":["React","useState","useContext","axios","Card","Input","Button","ErrorModal","LoadingSpinner","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","AuthContext","Auth","auth","isLoginMode","setIsLoginMode","isLoading","setIsLoading","error","setError","formState","InputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","authSubmitHander","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","login","err","message","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","asOveray","onSubmit","element","id","type","label","validators","errorText","onInput","disabled","inverse","onClick"],"sources":["C:/Users/IMWONHYEOK/study/react/section_10/frontend/src/user/pages/Auth.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\n// eslint-disable-next-line\nimport axios from 'axios';\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport {\n    VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport './Auth.css';\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    const [formState, InputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFormData({\n                ...formState.inputs,    // 기존의 값은 유지하며 \n                name: undefined         // name 필드만 undefined함\n            }, formState.inputs.email.isValid &&\n            formState.inputs.password.isValid);\n        } else {\n            setFormData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                }\n            }, false);\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmitHander = async event => {\n        event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n\n        // fetch 함수를 쓰는 경우\n        if (isLoginMode) {\n            // 로그인 모드일 때의 로직\n        } else {\n            // 회원가입 모드일 때의 로직\n            try {\n                setIsLoading(true);\n                const response = fetch('http://localhost:5000/api/users/signup', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, body: JSON.stringify({\n                        name: formState.inputs.name.value,\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    })\n                });\n\n                const responseData = (await response).json();\n                console.log(responseData);\n                setIsLoading(false);\n                auth.login();\n        auth.login();\n            } catch (err) {\n                console.log(err);\n                setIsLoading(false);\n                setError(err.message || 'Something went wrong, please try again');\n            }\n        }\n\n        // // axios 서드파티Lib 쓰는 경우\n        // if (isLoginMode) {\n        //     // 로그인 모드일 때의 로직\n        // } else {\n        //     // 회원가입 모드일 때의 로직\n        //     try {\n        //         const response = await axios.post('http://localhost:5000/api/users/signup', {\n        //             name: formState.inputs.name.value,\n        //             email: formState.inputs.email.value,\n        //             password: formState.inputs.password.value\n        //         }, {\n        //             headers: {\n        //                 'Content-Type': 'application/json'\n        //             }\n        //         });\n\n        //         const responseData = response.data;\n        //         console.log(responseData);\n        //         auth.login();\n        //     } catch (err) {\n        //         console.log(err);\n        //     }\n        // }\n    };\n\n    return (<Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOveray/>}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHander}>\n            {!isLoginMode && (\n                <Input\n                    element=\"input\"\n                    id=\"name\"\n                    type=\"text\"\n                    label=\"Your Name\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a name.\"\n                    onInput={InputHandler}\n                />\n            )}\n            <Input element=\"input\"\n                id=\"email\"\n                type=\"email\"\n                label=\"E-mail\"\n                validators={[VALIDATOR_EMAIL()]}\n                errorText=\"Please enter a valid Email address.\"\n                onInput={InputHandler}\n            />\n            <Input element=\"input\"\n                id=\"password\"\n                type=\"password\"\n                label=\"Password\"\n                validators={[VALIDATOR_MINLENGTH(5)]}\n                errorText=\"Please enter a valid password, at least 5 characters.\"\n                onInput={InputHandler}\n            />\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                {isLoginMode ? \"확인\" : \"회원정보 작성 완료\"}\n            </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>{isLoginMode ? '회원 가입' : '로그인'}으로 가기</Button>\n    </Card>);\n};\n\nexport default Auth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}