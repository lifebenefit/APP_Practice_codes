{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IMWONHYEOK\\\\study\\\\react\\\\section_12\\\\frontend\\\\src\\\\places\\\\pages\\\\NewPlace.js\";\nimport React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { API_BASE, API_PLACES } from \"../../config\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./PlaceForm.css\";\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    },\n    address: {\n      value: '',\n      isValid: false\n    },\n    image: {\n      value: null,\n      isValid: false\n    }\n  }, false);\n  const history = useHistory();\n  const placeSubmitHandler = async event => {\n    // ADD PLACE 를 누르면 새로고침 되는게 Default 설정이므로 새로고침 안되게끔 방지하는 코드\n    event.preventDefault();\n    try {\n      /** Image 가 아닌 경우 JSON */\n      // await sendRequest(\n      //   `${API_BASE.home}${API_BASE.placesRoutes}${API_PLACES.root}`,\n      //   \"POST\",\n      //   JSON.stringify({\n      //     title: formState.inputs.title.value,\n      //     description: formState.inputs.description.value,\n      //     address: formState.inputs.address.value,\n      //     creator: auth.userId\n      //   }),\n      //   { \"Content-Type\": \"application/json\" }\n      // );\n      // // Redirect the user to a different page\n      // history.push('/');\n\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n      await sendRequest(`${API_BASE.home}${API_BASE.placesRoutes}${API_PLACES.root}`, \"POST\", formData);\n      // await sendRequest('http://localhost:5000/api/places', 'POST', formData);\n      history.push('/');\n    } catch (err) {}\n  };\n  // console.log(`ADD PLACE 활성화 : ${formState.isValid}`);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    showError: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please Enter a valid title\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please Enter a valid description (at least 5 characters)\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"address\",\n    element: \"input\",\n    label: \"Address\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please Enter a valid address\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ImageUpload, {\n    center: true,\n    id: \"image\",\n    onInput: inputHandler,\n    errorText: \"please provide a image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"ADD PLACE\")));\n};\nexport default NewPlace; //","map":{"version":3,"names":["React","useContext","useHistory","Input","Button","ErrorModal","LoadingSpinner","ImageUpload","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","API_BASE","API_PLACES","AuthContext","useForm","useHttpClient","NewPlace","auth","isLoading","error","sendRequest","clearError","formState","inputHandler","title","value","isValid","description","address","image","history","placeSubmitHandler","event","preventDefault","formData","FormData","append","inputs","userId","home","placesRoutes","root","push","err","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","showError","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","errorText","onInput","center","disabled"],"sources":["C:/Users/IMWONHYEOK/study/react/section_12/frontend/src/places/pages/NewPlace.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from \"../../shared/util/validators\";\n\nimport { API_BASE, API_PLACES } from \"../../config\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./PlaceForm.css\";\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    },\n    address: {\n      value: '',\n      isValid: false\n    },\n    image: {\n      value: null,\n      isValid: false\n    }\n  }, false);\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async event => {\n    // ADD PLACE 를 누르면 새로고침 되는게 Default 설정이므로 새로고침 안되게끔 방지하는 코드\n    event.preventDefault();\n    try {\n      /** Image 가 아닌 경우 JSON */\n      // await sendRequest(\n      //   `${API_BASE.home}${API_BASE.placesRoutes}${API_PLACES.root}`,\n      //   \"POST\",\n      //   JSON.stringify({\n      //     title: formState.inputs.title.value,\n      //     description: formState.inputs.description.value,\n      //     address: formState.inputs.address.value,\n      //     creator: auth.userId\n      //   }),\n      //   { \"Content-Type\": \"application/json\" }\n      // );\n      // // Redirect the user to a different page\n      // history.push('/');\n\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n\n      await sendRequest(\n        `${API_BASE.home}${API_BASE.placesRoutes}${API_PLACES.root}`,\n        \"POST\",\n        formData\n      )\n      // await sendRequest('http://localhost:5000/api/places', 'POST', formData);\n      history.push('/');\n    } catch (err) { }\n  }\n  // console.log(`ADD PLACE 활성화 : ${formState.isValid}`);\n  return (\n    <React.Fragment>\n      <ErrorModal showError={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please Enter a valid title\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please Enter a valid description (at least 5 characters)\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please Enter a valid address\"\n          onInput={inputHandler}\n        />\n        <ImageUpload center \n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"please provide a image\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace; //"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}