{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IMWONHYEOK\\\\study\\\\react\\\\section_10\\\\frontend\\\\src\\\\user\\\\pages\\\\Auth.js\";\nimport React, { useState, useContext } from \"react\";\n// eslint-disable-next-line\nimport axios from 'axios';\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport './Auth.css';\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [formState, InputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,\n        // 기존의 값은 유지하며 \n        name: undefined // name 필드만 undefined함\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({\n        ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n  const authSubmitHander = async event => {\n    event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n\n    // fetch 함수를 쓰는 경우\n    if (isLoginMode) {\n      // 로그인 모드일 때의 로직\n    } else {\n      // 회원가입 모드일 때의 로직\n      try {\n        const response = fetch('http://localhost:5000/api/users/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        const responseData = (await response).json();\n        console.log(responseData);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    auth.login();\n\n    // // axios 서드파티Lib 쓰는 경우\n    // if (isLoginMode) {\n    //     // 로그인 모드일 때의 로직\n    // } else {\n    //     // 회원가입 모드일 때의 로직\n    //     try {\n    //         const response = await axios.post('http://localhost:5000/api/users/signup', {\n    //             name: formState.inputs.name.value,\n    //             email: formState.inputs.email.value,\n    //             password: formState.inputs.password.value\n    //         }, {\n    //             headers: {\n    //                 'Content-Type': 'application/json'\n    //             }\n    //         });\n\n    //         const responseData = response.data;\n    //         console.log(responseData);\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n    // auth.login();\n  };\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"Login Required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"authentication\",\n    onSubmit: authSubmitHander,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a name.\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid Email address.\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid password, at least 5 characters.\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, isLoginMode ? \"확인\" : \"회원정보 작성 완료\")), /*#__PURE__*/React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, isLoginMode ? '회원 가입' : '로그인', \"\\uC73C\\uB85C \\uAC00\\uAE30\"));\n};\nexport default Auth;","map":{"version":3,"names":["React","useState","useContext","axios","Card","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","AuthContext","Auth","auth","isLoginMode","setIsLoginMode","formState","InputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","authSubmitHander","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","err","login","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","element","id","type","label","validators","errorText","onInput","disabled","inverse","onClick"],"sources":["C:/Users/IMWONHYEOK/study/react/section_10/frontend/src/user/pages/Auth.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\n// eslint-disable-next-line\nimport axios from 'axios';\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport {\n    VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport './Auth.css';\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const [formState, InputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFormData({\n                ...formState.inputs,    // 기존의 값은 유지하며 \n                name: undefined         // name 필드만 undefined함\n            }, formState.inputs.email.isValid &&\n            formState.inputs.password.isValid);\n        } else {\n            setFormData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                }\n            }, false);\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmitHander = async event => {\n        event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n\n        // fetch 함수를 쓰는 경우\n        if (isLoginMode){\n            // 로그인 모드일 때의 로직\n        }else{\n            // 회원가입 모드일 때의 로직\n            try{\n                const response = fetch('http://localhost:5000/api/users/signup', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, body: JSON.stringify({\n                        name        :formState.inputs.name.value,\n                        email       :formState.inputs.email.value,\n                        password    :formState.inputs.password.value    \n                    })\n                });\n\n                const responseData = (await response).json();\n                console.log(responseData);\n            }catch (err) {\n                console.log(err);\n            }\n        }\n        auth.login();\n\n        // // axios 서드파티Lib 쓰는 경우\n        // if (isLoginMode) {\n        //     // 로그인 모드일 때의 로직\n        // } else {\n        //     // 회원가입 모드일 때의 로직\n        //     try {\n        //         const response = await axios.post('http://localhost:5000/api/users/signup', {\n        //             name: formState.inputs.name.value,\n        //             email: formState.inputs.email.value,\n        //             password: formState.inputs.password.value\n        //         }, {\n        //             headers: {\n        //                 'Content-Type': 'application/json'\n        //             }\n        //         });\n    \n        //         const responseData = response.data;\n        //         console.log(responseData);\n        //     } catch (err) {\n        //         console.log(err);\n        //     }\n        // }\n        // auth.login();\n    };\n\n    return (<Card>\n        <h2>Login Required</h2>\n        <hr />\n        <form className=\"authentication\" onSubmit={authSubmitHander}>\n            {!isLoginMode && (\n                <Input\n                    element=\"input\"\n                    id=\"name\"\n                    type=\"text\"\n                    label=\"Your Name\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a name.\"\n                    onInput={InputHandler}\n                />\n            )}\n            <Input element=\"input\"\n                id=\"email\"\n                type=\"email\"\n                label=\"E-mail\"\n                validators={[VALIDATOR_EMAIL()]}\n                errorText=\"Please enter a valid Email address.\"\n                onInput={InputHandler}\n            />\n            <Input element=\"input\"\n                id=\"password\"\n                type=\"password\"\n                label=\"Password\"\n                validators={[VALIDATOR_MINLENGTH(5)]}\n                errorText=\"Please enter a valid password, at least 5 characters.\"\n                onInput={InputHandler}\n            />\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                {isLoginMode ? \"확인\" : \"회원정보 작성 완료\"}\n            </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>{isLoginMode ? '회원 가입' : '로그인'}으로 가기</Button>\n    </Card>);\n};\n\nexport default Auth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}