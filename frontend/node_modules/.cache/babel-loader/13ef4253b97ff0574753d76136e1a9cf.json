{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IMWONHYEOK\\\\study\\\\react\\\\section_10\\\\frontend\\\\src\\\\places\\\\pages\\\\UpdatePlace.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport \"./PlaceForm.css\";\n\n// server 나 Backend , DB 이런거 없으니까 그냥 임시로 복붙 때리는거\nconst DUMMY_PLACES = [{\n  id: 'p1',\n  title: 'Empire State Building 1',\n  description: 'One of the most famous sky scrapers in the world! 1',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n  address: '20 W 34th St, New York, NY 10001',\n  location: {\n    lat: 40.7484405,\n    lng: -73.9878584\n  },\n  creator: 'u1'\n}, {\n  id: 'p2',\n  title: 'Empire State Building 22',\n  description: 'One of the most famous sky scrapers in the world! 22',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n  address: '20 W 34th St, New York, NY 10001',\n  location: {\n    lat: 40.7484405,\n    lng: -73.9878584\n  },\n  creator: 'u2'\n}];\nconst UpdatePlace = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const placeId = useParams().placeId;\n\n  // 서버의 경우 Data 지연이 일어나는 상황을 재현 해보려고 주석 처리함.\n  // const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n\n  const [formState, InputHandler, setFormData] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n  const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n\n  // /**\n  //  * Uncaught Error: Too many re-renders. \n  //  * React limits the number of renders to prevent an infinite loop.\n  //  * 해당 에러 발생 : setFormData 함수는 dispatch 함수를 호출하는데\n  //  * dispatch 할 때마다 리렌더링 하게됨.\n  //  */\n  // setFormData({\n  //     title: {\n  //         value: identifiedPlace.title,\n  //         isValid: true\n  //     },\n  //     description: {\n  //         value: identifiedPlace.description,\n  //         isValid: true\n  //     }\n  // })\n\n  useEffect(() => {\n    if (identifiedPlace) {\n      setFormData({\n        title: {\n          value: identifiedPlace.title,\n          isValid: true\n        },\n        description: {\n          value: identifiedPlace.description,\n          isValid: true\n        }\n      }, true);\n    }\n    setIsLoading(false);\n  }, [setFormData, identifiedPlace]);\n\n  // formState가 변경될 때마다 로그 출력\n  useEffect(() => {\n    console.log('formState가 변경되었습니다:', formState);\n  }, [formState]);\n  const placeUpdateSubmitHandler = event => {\n    // ADD PLACE 를 누르면 새로고침 되는게 Default 설정이므로 새로고침 안되게끔 방지하는 코드\n    event.preventDefault();\n    //TODO: 이후엔 이 fomrState.inputs data를 BackEnd 로 보내야함.\n    console.log(formState.inputs);\n  };\n  if (!identifiedPlace) {\n    return (\n      /*#__PURE__*/\n      // <div className=\"center\">\n      //     <h2>Could not find place!</h2>\n      // </div>\n      React.createElement(\"div\", {\n        className: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, \"Could not find place!\")))\n    );\n  }\n  // return <h2>Update Place : {placeId}</h2>\n\n  console.log(`init data : ${formState.inputs.title.value}`);\n  // console.log(`ADD PLACE 활성화 : ${formState.isValid}`);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, \"loading ...\"));\n  }\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    lable: \"Title\",\n    validators: [VALIDATOR_REQUIRE()]\n    // validators={[VALIDATOR_MINLENGTH(1)]}\n    ,\n    errorText: \"Please enter a valid title.\",\n    onInput: InputHandler,\n    initialValue: formState.inputs.title.value,\n    initialValid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    lable: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description.\",\n    onInput: InputHandler,\n    initialValue: formState.inputs.description.value,\n    initialValid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"UPDATE PLACE\"));\n};\nexport default UpdatePlace;","map":{"version":3,"names":["React","useEffect","useState","useParams","Input","Button","Card","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_PLACES","id","title","description","imageUrl","address","location","lat","lng","creator","UpdatePlace","isLoading","setIsLoading","placeId","formState","InputHandler","setFormData","value","isValid","identifiedPlace","find","p","console","log","placeUpdateSubmitHandler","event","preventDefault","inputs","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","element","type","lable","validators","errorText","onInput","initialValue","initialValid","disabled"],"sources":["C:/Users/IMWONHYEOK/study/react/section_10/frontend/src/places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\n\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from \"../../shared/hooks/form-hook\";\n\nimport \"./PlaceForm.css\";\n\n// server 나 Backend , DB 이런거 없으니까 그냥 임시로 복붙 때리는거\nconst DUMMY_PLACES = [\n    {\n        id: 'p1',\n        title: 'Empire State Building 1',\n        description: 'One of the most famous sky scrapers in the world! 1',\n        imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n        address: '20 W 34th St, New York, NY 10001',\n        location: {\n            lat: 40.7484405,\n            lng: -73.9878584\n        },\n        creator: 'u1'\n    },\n    {\n        id: 'p2',\n        title: 'Empire State Building 22',\n        description: 'One of the most famous sky scrapers in the world! 22',\n        imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n        address: '20 W 34th St, New York, NY 10001',\n        location: {\n            lat: 40.7484405,\n            lng: -73.9878584\n        },\n        creator: 'u2'\n    }\n];\n\n\nconst UpdatePlace = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const placeId = useParams().placeId;\n\n    // 서버의 경우 Data 지연이 일어나는 상황을 재현 해보려고 주석 처리함.\n    // const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n\n    const [formState, InputHandler, setFormData] = useForm({\n        title: {\n            value: \"\",\n            isValid: false\n        },\n        description: {\n            value: \"\",\n            isValid: false\n        }\n    }, false);\n\n    const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n\n    // /**\n    //  * Uncaught Error: Too many re-renders. \n    //  * React limits the number of renders to prevent an infinite loop.\n    //  * 해당 에러 발생 : setFormData 함수는 dispatch 함수를 호출하는데\n    //  * dispatch 할 때마다 리렌더링 하게됨.\n    //  */\n    // setFormData({\n    //     title: {\n    //         value: identifiedPlace.title,\n    //         isValid: true\n    //     },\n    //     description: {\n    //         value: identifiedPlace.description,\n    //         isValid: true\n    //     }\n    // })\n\n    useEffect(() => {\n        if (identifiedPlace) {\n            setFormData({\n                title: {\n                    value: identifiedPlace.title,\n                    isValid: true\n                },\n                description: {\n                    value: identifiedPlace.description,\n                    isValid: true\n                }\n            }, true);\n        }\n        setIsLoading(false)\n    }, [setFormData, identifiedPlace])\n\n    // formState가 변경될 때마다 로그 출력\n    useEffect(() => {\n        console.log('formState가 변경되었습니다:', formState);\n    }, [formState]);\n\n    const placeUpdateSubmitHandler = event => {\n        // ADD PLACE 를 누르면 새로고침 되는게 Default 설정이므로 새로고침 안되게끔 방지하는 코드\n        event.preventDefault();\n        //TODO: 이후엔 이 fomrState.inputs data를 BackEnd 로 보내야함.\n        console.log(formState.inputs);\n    };\n\n    if (!identifiedPlace) {\n        return (\n            // <div className=\"center\">\n            //     <h2>Could not find place!</h2>\n            // </div>\n            <div className=\"center\">\n                <Card>\n                    <h2>Could not find place!</h2>\n                </Card>\n            </div>\n        )\n    }\n    // return <h2>Update Place : {placeId}</h2>\n\n    console.log(`init data : ${formState.inputs.title.value}`)\n    // console.log(`ADD PLACE 활성화 : ${formState.isValid}`);\n\n    if (isLoading) {\n        return (\n            <div className=\"center\">\n                <h2>loading ...</h2>\n            </div>\n        )\n    }\n    return (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n            <Input\n                id='title'\n                element='input'\n                type='text'\n                lable='Title'\n                validators={[VALIDATOR_REQUIRE()]}\n                // validators={[VALIDATOR_MINLENGTH(1)]}\n                errorText=\"Please enter a valid title.\"\n                onInput={InputHandler}\n                initialValue={formState.inputs.title.value}\n                initialValid={formState.inputs.title.isValid}\n            />\n            <Input\n                id='description'\n                element='textarea'\n                lable='Description'\n                validators={[VALIDATOR_MINLENGTH(5)]}\n                errorText=\"Please enter a valid description.\"\n                onInput={InputHandler}\n                initialValue={formState.inputs.description.value}\n                initialValid={formState.inputs.description.isValid}\n            />\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                UPDATE PLACE\n            </Button>\n        </form>\n    );\n};\n\nexport default UpdatePlace;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}